import { supabase } from "./supabase";
import { format, isToday, isFuture } from "date-fns";
import { sendBookingNotification } from "../email-service";

export interface Appointment {
  id: string;
  patient_name: string;
  patient_email: string;
  patient_phone: string;
  service_id: string;
  service_name: string;
  duration: number;
  price: number;
  date: string;
  time_slot: string;
  status: "pending" | "confirmed" | "cancelled" | "completed";
  notes?: string | null;
  emergency_contact?: string | null;
  emergency_phone?: string | null;
  insurance_provider?: string | null;
  first_visit: boolean;
  created_at: string;
  updated_at: string;
}

export interface Service {
  id: string;
  name: string;
  duration: number;
  description: string;
  price: number;
  category: "cooling" | "consultation";
}

export const services: Service[] = [
  {
    id: "consultation-free",
    name: "Erstberatung & Testanwendung",
    duration: 30,
    description:
      "Kostenloser Einstieg: Pers√∂nliche Beratung und erste Anwendung. Dauer: ca. 30 Minuten.",
    price: 0,
    category: "consultation",
  },
  {
    id: "cooling-single",
    name: "K√§lteanwendung ‚Äì Einzelsitzung",
    duration: 30,
    description: "30 Minuten gezielte K√§ltetherapie f√ºr bestehende Kunden.",
    price: 25,
    category: "cooling",
  },
  // {
  //   id: "cooling-10",
  //   name: "10er-Paket K√§lteanwendung",
  //   duration: 30,
  //   description:
  //     "10 Anwendungen √† 30 Minuten ‚Äì optimal f√ºr regelm√§√üige Nutzung.",
  //   price: 210,
  //   category: "cooling",
  // },
  // {
  //   id: "cooling-20",
  //   name: "20er-Paket K√§lteanwendung",
  //   duration: 30,
  //   description:
  //     "20 Anwendungen √† 30 Minuten ‚Äì maximale Wirkung zum Vorteilspreis.",
  //   price: 380,
  //   category: "cooling",
  // },
];

// Termine abrufen
export async function getAppointments(
  filter: "all" | "today" | "upcoming" | "pending" = "all"
): Promise<Appointment[]> {
  let query = supabase
    .from("appointments")
    .select("*")
    .order("date", { ascending: true })
    .order("time_slot", { ascending: true });

  if (filter === "today") {
    const today = format(new Date(), "yyyy-MM-dd");
    query = query.eq("date", today);
  } else if (filter === "upcoming") {
    const today = format(new Date(), "yyyy-MM-dd");
    query = query.gte("date", today);
  } else if (filter === "pending") {
    query = query.eq("status", "pending");
  }

  const { data, error } = await query;

  if (error) {
    console.error("Fehler beim Laden der Termine:", error);
    throw new Error("Termine konnten nicht geladen werden");
  }

  return data || [];
}

// Neuen Termin erstellen
export async function createAppointment(
  appointmentData: Omit<Appointment, "id" | "created_at" | "updated_at">
): Promise<Appointment> {
  console.log("üîç createAppointment aufgerufen mit:", appointmentData);

  // Pr√ºfen ob der Zeitslot bereits belegt ist
  const { data: existingAppointment } = await supabase
    .from("appointments")
    .select("id")
    .eq("date", appointmentData.date)
    .eq("time_slot", appointmentData.time_slot)
    .single();

  if (existingAppointment) {
    console.log("‚ùå Zeitslot bereits belegt:", existingAppointment);
    throw new Error("Dieser Zeitslot ist bereits belegt");
  }

  console.log("‚úÖ Zeitslot ist frei, erstelle Termin...");

  const { data, error } = await supabase
    .from("appointments")
    .insert([
      {
        ...appointmentData,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ])
    .select()
    .single();

  if (error) {
    console.error("Fehler beim Erstellen des Termins:", error);
    throw new Error("Termin konnte nicht erstellt werden");
  }

  console.log("‚úÖ Termin in DB erstellt:", data);

  // E-Mail-Benachrichtigung senden
  const service = getServiceById(appointmentData.service_id);
  if (service) {
    console.log("üìß Sende E-Mail-Benachrichtigung...");
    const emailData = {
      patientName: appointmentData.patient_name,
      patientEmail: appointmentData.patient_email,
      patientPhone: appointmentData.patient_phone,
      serviceName: service.name,
      duration: service.duration,
      price: service.price,
      date: format(new Date(appointmentData.date), "dd.MM.yyyy"),
      timeSlot: appointmentData.time_slot,
      insuranceProvider: appointmentData.insurance_provider ?? undefined,
      firstVisit: appointmentData.first_visit,
    };

    try {
      await sendBookingNotification(emailData);
      console.log("‚úÖ E-Mail-Benachrichtigung gesendet");
    } catch (emailError) {
      console.error("‚ö†Ô∏è E-Mail-Versand fehlgeschlagen:", emailError);
      // Termin trotzdem erfolgreich, nur E-Mail fehlgeschlagen
    }
  }

  return data;
}

// Termin l√∂schen
export async function deleteAppointment(id: string): Promise<void> {
  const { error } = await supabase.from("appointments").delete().eq("id", id);

  if (error) {
    console.error("Fehler beim L√∂schen des Termins:", error);
    throw new Error("Termin konnte nicht gel√∂scht werden");
  }
}

// Termin aktualisieren
export async function updateAppointment(
  id: string,
  updates: Partial<Appointment>
): Promise<Appointment> {
  const { data, error } = await supabase
    .from("appointments")
    .update({
      ...updates,
      updated_at: new Date().toISOString(),
    })
    .eq("id", id)
    .select()
    .single();

  if (error) {
    console.error("Fehler beim Aktualisieren des Termins:", error);
    throw new Error("Termin konnte nicht aktualisiert werden");
  }

  return data;
}

// Verf√ºgbare Zeitslots f√ºr ein Datum abrufen
export async function getAvailableTimeSlots(
  date: Date
): Promise<Array<{ time: string; available: boolean }>> {
  const dateString = format(date, "yyyy-MM-dd");
  const dayOfWeek = date.getDay();

  console.log(
    "üîç Lade verf√ºgbare Zeitslots f√ºr:",
    dateString,
    "Wochentag:",
    dayOfWeek
  );

  // Alle gebuchten Termine f√ºr das Datum abrufen
  const { data: bookedAppointments } = await supabase
    .from("appointments")
    .select("time_slot")
    .eq("date", dateString)
    .neq("status", "cancelled");

  const bookedSlots = bookedAppointments?.map((apt) => apt.time_slot) || [];
  console.log("üìÖ Gebuchte Slots:", bookedSlots);

  // Verf√ºgbarkeitseinstellungen f√ºr den Wochentag abrufen
  const { data: availabilitySettings } = await supabase
    .from("availability")
    .select("time_slot, is_available")
    .eq("day_of_week", dayOfWeek);

  const availabilityMap: Record<string, boolean> = {};
  availabilitySettings?.forEach((setting) => {
    availabilityMap[setting.time_slot] = setting.is_available;
  });
  console.log("‚öôÔ∏è Verf√ºgbarkeitseinstellungen:", availabilityMap);
  console.log(
    "üìä Anzahl Verf√ºgbarkeitseinstellungen:",
    availabilitySettings?.length || 0
  );

  // Alle m√∂glichen Zeitslots generieren
  const allSlots: Array<{ time: string; available: boolean }> = [];

  for (let hour = 8; hour <= 18; hour++) {
    for (let minute = 0; minute < 60; minute += 30) {
      // Mittagspause √ºberspringen (12:30-13:30)
      if (hour === 12 && minute === 30) continue;
      if (hour === 13 && minute === 0) continue;
      if (hour === 13 && minute === 30) continue;

      // Letzten Slot um 18:30 √ºberspringen
      if (hour === 18 && minute === 30) continue;

      const time = `${hour.toString().padStart(2, "0")}:${minute
        .toString()
        .padStart(2, "0")}`;

      // NEUE LOGIK: Slot ist nur verf√ºgbar wenn:
      // 1. Nicht gebucht UND
      // 2. Explizit in der Availability-Tabelle als verf√ºgbar (is_available = true) markiert
      const isBooked = bookedSlots.includes(time);
      const isAvailableInSettings = availabilityMap[time] === true; // Nur wenn explizit true
      const available = !isBooked && isAvailableInSettings;

      console.log(
        `‚è∞ ${time}: gebucht=${isBooked}, verf√ºgbar_in_settings=${isAvailableInSettings}, final_verf√ºgbar=${available}`
      );

      allSlots.push({ time, available });
    }
  }

  console.log(
    "‚úÖ Generierte Slots:",
    allSlots.filter((s) => s.available).map((s) => s.time)
  );
  console.log(
    "‚ùå Nicht verf√ºgbare Slots:",
    allSlots.filter((s) => !s.available).map((s) => s.time)
  );
  return allSlots;
}

// Admin-Statistiken abrufen
export async function getAdminStats() {
  const today = format(new Date(), "yyyy-MM-dd");
  const yesterday = format(
    new Date(Date.now() - 24 * 60 * 60 * 1000),
    "yyyy-MM-dd"
  );

  // Heutige Termine
  const { data: todayAppointments } = await supabase
    .from("appointments")
    .select("id")
    .eq("date", today);

  // Gestrige Termine
  const { data: yesterdayAppointments } = await supabase
    .from("appointments")
    .select("id")
    .eq("date", yesterday);

  // Alle Termine
  const { data: allAppointments } = await supabase
    .from("appointments")
    .select("id");

  // Ausstehende Termine
  const { data: pendingAppointments } = await supabase
    .from("appointments")
    .select("id")
    .eq("status", "pending");

  // Monatlicher Umsatz (vereinfacht)
  const { data: monthlyAppointments } = await supabase
    .from("appointments")
    .select("price")
    .in("status", ["confirmed", "completed"]);

  const monthlyRevenue =
    monthlyAppointments?.reduce((sum, apt) => sum + apt.price, 0) || 0;

  return {
    todayAppointments: todayAppointments?.length || 0,
    yesterdayAppointments: yesterdayAppointments?.length || 0,
    totalAppointments: allAppointments?.length || 0,
    pendingAppointments: pendingAppointments?.length || 0,
    monthlyRevenue,
    revenueGrowth: 15.3, // Beispielwert
  };
}

// Service nach ID finden
export function getServiceById(serviceId: string): Service | undefined {
  return services.find((service) => service.id === serviceId);
}

// Services nach Kategorie gruppieren
export function getServicesByCategory() {
  const consultations = services.filter((s) => s.category === "consultation");
  const coolingTreatments = services.filter((s) => s.category === "cooling");

  return {
    consultations,
    coolingTreatments,
  };
}

// Verf√ºgbarkeit verwalten
export async function getAvailability(): Promise<
  Array<{ day_of_week: number; time_slot: string; is_available: boolean }>
> {
  const { data, error } = await supabase
    .from("availability")
    .select("*")
    .order("day_of_week", { ascending: true })
    .order("time_slot", { ascending: true });

  if (error) {
    console.error("Fehler beim Laden der Verf√ºgbarkeit:", error);
    throw new Error("Verf√ºgbarkeit konnte nicht geladen werden");
  }

  return data || [];
}

// Verf√ºgbarkeit f√ºr einen bestimmten Tag und Zeitslot setzen
export async function setAvailability(
  dayOfWeek: number,
  timeSlot: string,
  isAvailable: boolean
): Promise<void> {
  // Pr√ºfen ob bereits ein Eintrag existiert
  const { data: existing } = await supabase
    .from("availability")
    .select("id")
    .eq("day_of_week", dayOfWeek)
    .eq("time_slot", timeSlot)
    .single();

  if (existing) {
    // Aktualisieren
    const { error } = await supabase
      .from("availability")
      .update({
        is_available: isAvailable,
        updated_at: new Date().toISOString(),
      })
      .eq("id", existing.id);

    if (error) {
      console.error("Fehler beim Aktualisieren der Verf√ºgbarkeit:", error);
      throw new Error("Verf√ºgbarkeit konnte nicht aktualisiert werden");
    }
  } else {
    // Neu erstellen
    const { error } = await supabase.from("availability").insert([
      {
        day_of_week: dayOfWeek,
        time_slot: timeSlot,
        is_available: isAvailable,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      },
    ]);

    if (error) {
      console.error("Fehler beim Erstellen der Verf√ºgbarkeit:", error);
      throw new Error("Verf√ºgbarkeit konnte nicht erstellt werden");
    }
  }
}

// Mehrere Verf√ºgbarkeiten auf einmal setzen
export async function setBulkAvailability(
  availabilityData: Array<{
    dayOfWeek: number;
    timeSlot: string;
    isAvailable: boolean;
  }>,
  weekStartDate?: Date
): Promise<void> {
  if (!weekStartDate) {
    // Fallback: Allgemeine Verf√ºgbarkeiten in alter Tabelle speichern
    console.log(
      "üîÑ Bulk-Update f√ºr allgemeine Verf√ºgbarkeiten:",
      availabilityData.length,
      "Eintr√§ge"
    );

    try {
      // Erst alle bestehenden Eintr√§ge f√ºr die betroffenen Tage l√∂schen
      const affectedDays = Array.from(
        new Set(availabilityData.map((item) => item.dayOfWeek))
      );

      for (let i = 0; i < affectedDays.length; i++) {
        const day = affectedDays[i];
        const { error: deleteError } = await supabase
          .from("availability")
          .delete()
          .eq("day_of_week", day);

        if (deleteError) {
          console.error(
            "Fehler beim L√∂schen bestehender Verf√ºgbarkeiten:",
            deleteError
          );
        }
      }

      // Dann neue Eintr√§ge einf√ºgen
      const insertData = availabilityData.map((item) => ({
        day_of_week: item.dayOfWeek,
        time_slot: item.timeSlot,
        is_available: item.isAvailable,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      }));

      const { error: insertError } = await supabase
        .from("availability")
        .insert(insertData);

      if (insertError) {
        console.error(
          "Fehler beim Einf√ºgen neuer Verf√ºgbarkeiten:",
          insertError
        );
        throw insertError;
      }

      console.log("‚úÖ Bulk-Update f√ºr allgemeine Verf√ºgbarkeiten erfolgreich");
    } catch (error) {
      console.error(
        "‚ùå Fehler beim Bulk-Update der allgemeinen Verf√ºgbarkeit:",
        error
      );
      throw new Error(
        "Allgemeine Verf√ºgbarkeiten konnten nicht gespeichert werden"
      );
    }
    return;
  }

  // Wochenspezifische Verf√ºgbarkeit in weekly_availability speichern
  const weekStart = format(weekStartDate, "yyyy-MM-dd");
  console.log(
    "üíæ Speichere in weekly_availability f√ºr Woche:",
    weekStart,
    "- Anzahl Eintr√§ge:",
    availabilityData.length
  );
  console.log(
    "üîÑ Bulk-Update f√ºr wochenspezifische Verf√ºgbarkeiten:",
    availabilityData.length,
    "Eintr√§ge f√ºr Woche",
    weekStart
  );

  try {
    // Erst alle bestehenden Eintr√§ge f√ºr diese Woche l√∂schen
    const { error: deleteError } = await supabase
      .from("weekly_availability")
      .delete()
      .eq("week_start_date", weekStart);

    if (deleteError) {
      console.error(
        "Fehler beim L√∂schen bestehender wochenspezifischer Verf√ºgbarkeiten:",
        deleteError
      );
    }
    console.log("üóëÔ∏è Bestehende weekly_availability Eintr√§ge gel√∂scht");

    // Neue wochenspezifische Eintr√§ge einf√ºgen
    const insertData = availabilityData.map((item) => ({
      week_start_date: weekStart,
      day_of_week: item.dayOfWeek,
      time_slot: item.timeSlot,
      is_available: item.isAvailable,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }));

    console.log(
      "üìù F√ºge neue weekly_availability Eintr√§ge ein:",
      insertData.length
    );
    console.log(
      "üìù F√ºge ein:",
      insertData.length,
      "wochenspezifische Eintr√§ge"
    );
    console.log("üìã Beispiel-Eintrag:", insertData[0]);
    const { error: insertError } = await supabase
      .from("weekly_availability")
      .insert(insertData);

    if (insertError) {
      console.error(
        "Fehler beim Einf√ºgen neuer weekly_availability Eintr√§ge:",
        insertError
      );
      throw insertError;
    }

    console.log("‚úÖ Weekly_availability erfolgreich gespeichert");
  } catch (error) {
    console.error("‚ùå Fehler beim Speichern der weekly_availability:", error);
    throw new Error("Weekly_availability konnte nicht gespeichert werden");
  }
}

// Wochenspezifische Verf√ºgbarkeit setzen
export async function setWeeklyAvailability(
  weekStartDate: Date,
  availabilityData: Array<{
    dayOfWeek: number;
    timeSlot: string;
    isAvailable: boolean;
  }>
): Promise<void> {
  const weekStart = format(weekStartDate, "yyyy-MM-dd");
  console.log(
    "üíæ setWeeklyAvailability f√ºr Woche:",
    weekStart,
    "- Anzahl Eintr√§ge:",
    availabilityData.length
  );

  try {
    // Erst alle bestehenden Eintr√§ge f√ºr diese Woche l√∂schen
    const { error: deleteError } = await supabase
      .from("weekly_availability")
      .delete()
      .eq("week_start_date", weekStart);

    if (deleteError) {
      console.error(
        "‚ùå Fehler beim L√∂schen bestehender weekly_availability:",
        deleteError
      );
      throw deleteError;
    }
    console.log(
      "üóëÔ∏è Bestehende weekly_availability Eintr√§ge gel√∂scht f√ºr Woche:",
      weekStart
    );

    // Neue wochenspezifische Eintr√§ge einf√ºgen
    const insertData = availabilityData.map((item) => ({
      week_start_date: weekStart,
      day_of_week: item.dayOfWeek,
      time_slot: item.timeSlot,
      is_available: item.isAvailable,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    }));

    console.log(
      "üìù F√ºge neue weekly_availability Eintr√§ge ein:",
      insertData.length
    );
    console.log("üìã Beispiel-Eintrag:", insertData[0]);

    const { error: insertError } = await supabase
      .from("weekly_availability")
      .insert(insertData);

    if (insertError) {
      console.error(
        "‚ùå Fehler beim Einf√ºgen neuer weekly_availability:",
        insertError
      );
      throw insertError;
    }

    console.log("‚úÖ setWeeklyAvailability erfolgreich f√ºr Woche:", weekStart);
  } catch (error) {
    console.error("‚ùå Fehler in setWeeklyAvailability:", error);
    throw new Error(
      "Wochenspezifische Verf√ºgbarkeit konnte nicht gespeichert werden"
    );
  }
}

export async function getWeeklyAvailability(
  weekStartDate: Date
): Promise<Record<string, boolean>> {
  const weekStart = format(weekStartDate, "yyyy-MM-dd");
  console.log("üîç Lade aus weekly_availability f√ºr Woche:", weekStart);

  try {
    // Erst versuchen, wochenspezifische Verf√ºgbarkeiten zu laden
    const { data: weeklyData, error } = await supabase
      .from("weekly_availability")
      .select("day_of_week, time_slot, is_available")
      .eq("week_start_date", weekStart);

    if (error) {
      console.error("‚ùå Fehler beim Laden der weekly_availability:", error);
    }

    console.log(
      "üìä Weekly_availability Daten gefunden:",
      weeklyData?.length || 0,
      "Eintr√§ge"
    );

    if (weeklyData && weeklyData.length > 0) {
      // Wochenspezifische Daten gefunden
      const availabilityMap: Record<string, boolean> = {};
      weeklyData.forEach((item) => {
        const key = `${item.day_of_week}-${item.time_slot}`;
        availabilityMap[key] = item.is_available;
      });
      console.log("‚úÖ Verwende weekly_availability Daten");
      return availabilityMap;
    }

    // Fallback: Standard-Verf√ºgbarkeiten laden
    console.log(
      "üìã Keine weekly_availability Daten, lade Standard-Verf√ºgbarkeiten..."
    );
    const { data: standardData } = await supabase
      .from("availability")
      .select("day_of_week, time_slot, is_available");

    const availabilityMap: Record<string, boolean> = {};
    standardData?.forEach((item) => {
      const key = `${item.day_of_week}-${item.time_slot}`;
      availabilityMap[key] = item.is_available;
    });
    console.log(
      "‚úÖ Verwende Standard-Verf√ºgbarkeiten als Fallback:",
      Object.keys(availabilityMap).length,
      "Eintr√§ge"
    );
    return availabilityMap;
  } catch (error) {
    console.error("‚ùå Fehler beim Laden der Verf√ºgbarkeiten:", error);
    return {};
  }
}

// Alle Verf√ºgbarkeiten l√∂schen
export async function clearAllAvailability(): Promise<void> {
  const { error } = await supabase
    .from("availability")
    .delete()
    .neq("id", "00000000-0000-0000-0000-000000000000"); // Alle l√∂schen

  if (error) {
    console.error("Fehler beim L√∂schen der Verf√ºgbarkeiten:", error);
    throw new Error("Verf√ºgbarkeiten konnten nicht gel√∂scht werden");
  }
}
